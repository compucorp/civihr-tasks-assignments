!function(e,t){"use strict";e.module("crm-tasks-workflows.constants",[]).constant("customFieldIds",t.vars.customFieldIds)}(angular,CRM),function(e){"use strict";angular.module("crm-tasks-workflows.controllers",[])}(),function(e){"use strict";angular.module("crm-tasks-workflows.core",["crmCaseType"])}(),function(e){"use strict";angular.module("crm-tasks-workflows.decorators",[])}(),function(e){"use strict";function t(e,t,o,s,a,r,i,c,n){t.debug("Controller: CaseTypeExtendedController");var l,u,p,d,f,m={};function y(e,t){m.addActivity(e,t),e.activityTypes.forEach(function(e){e.name===t&&delete e.reference_activity})}a.actTypes={values:(l=r.values.map(function(e){return e.label=e.label+" (Task)",e}),u=i.values.map(function(e){return e.label=e.label+" (Document)",e}),l.concat(u))},e("CaseTypeCtrl",{$scope:o,crmApi:s,apiCalls:a}),m.addActivity=o.addActivity,o.addActivity=y,o.defaultRelationshipTypeOptions=(p=a.relTypes.values.filter(function(e){return"1"===e.is_active}),d=[],p.forEach(function(e){var t=e.label_a_b===e.label_b_a;d.push({label:e.label_b_a,value:e.id+"_b_a"}),t||d.push({label:e.label_a_b,value:e.id+"_a_b"})}),d),!o.caseType.id&&(f="custom_"+c["caseType.category"],o.caseType[f]=n,o.caseType.definition.activitySets[0].activityTypes=[])}angular.module("crm-tasks-workflows.controllers").controller("CaseTypeExtendedController",t),t.$inject=["$controller","$log","$scope","crmApi","apiCalls","activityOptionsTask","activityOptionsDocument","customFieldIds","defaultCaseTypeCategory"]}(),function(e){"use strict";function t(e){var t,o;function s(t){return["crmApi",function(e){return e("OptionValue","get",{option_group_id:"activity_type",component_id:t,sequential:1,options:{sort:"name",limit:0}})}]}return t=e.routes["/caseType/:id"],o=e.routes["/caseType"],t.controller="CaseTypeExtendedController",t.resolve.activityOptionsTask=s("CiviTask"),t.resolve.activityOptionsDocument=s("CiviDocument"),t.resolve.defaultCaseTypeCategory=["crmApi",function(e){return e("OptionValue","get",{sequential:1,option_group_id:"case_type_category",is_default:1,options:{limit:1}}).then(function(e){var t=e.values[0]||{};return t.value})}],o.resolve.caseTypes=["crmApi","customFieldIds",function(e,t){var o="custom_"+t["caseType.category"],s={options:{limit:0}};return s[o]="Workflow",e("CaseType","get",s)}],e}angular.module("crm-tasks-workflows.decorators").config(["$provide",function(e){e.decorator("$route",t)}]),t.$inject=["$delegate"]}(),function(e){"use strict";angular.module("crm-tasks-workflows",["crm-tasks-workflows.core","crm-tasks-workflows.constants","crm-tasks-workflows.controllers","crm-tasks-workflows.decorators"])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
