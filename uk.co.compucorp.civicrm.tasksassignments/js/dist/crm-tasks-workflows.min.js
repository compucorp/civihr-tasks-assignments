!function(t,e){"use strict";t.module("crm-tasks-workflows.constants",[]).constant("customFieldIds",e.vars.customFieldIds)}(angular,CRM),function(t){"use strict";angular.module("crm-tasks-workflows.controllers",[])}(),function(t){"use strict";angular.module("crm-tasks-workflows.core",["crmCaseType"])}(),function(t){"use strict";angular.module("crm-tasks-workflows.decorators",[])}(),function(t){"use strict";function e(t,e,o,s,a,r,n){e.debug("Controller: CaseTypeExtendedController");var i,c,l,u,p={};function d(t,e){p.addActivity(t,e),t.activityTypes.forEach(function(t){t.name===e&&delete t.reference_activity})}a.actTypes={values:(c=r.values.map(function(t){return t.label=t.label+" (Task)",t}),l=n.values.map(function(t){return t.label=t.label+" (Document)",t}),c.concat(l))},t("CaseTypeCtrl",{$scope:o,crmApi:s,apiCalls:a}),p.addActivity=o.addActivity,o.addActivity=d,o.defaultRelationshipTypeOptions=(u=a.relTypes.values.filter(function(t){return"1"===t.is_active}),CRM._.transform(u,function(t,e){var o=e.label_a_b===e.label_b_a;t.push({label:e.label_b_a,value:e.id+"_b_a"}),o||t.push({label:e.label_a_b,value:e.id+"_a_b"})},[])),i=!o.caseType.id,console.log("@@@@",o.defaultRelationshipTypeOptions),i&&(o.caseType.definition.activitySets[0].activityTypes=[])}angular.module("crm-tasks-workflows.controllers").controller("CaseTypeExtendedController",e),e.$inject=["$controller","$log","$scope","crmApi","apiCalls","activityOptionsTask","activityOptionsDocument"]}(),function(t){"use strict";function e(t){var e,o;function s(e){return["crmApi",function(t){return t("OptionValue","get",{option_group_id:"activity_type",component_id:e,sequential:1,options:{sort:"name",limit:0}})}]}return e=t.routes["/caseType/:id"],o=t.routes["/caseType"],e.controller="CaseTypeExtendedController",e.resolve.activityOptionsTask=s("CiviTask"),e.resolve.activityOptionsDocument=s("CiviDocument"),o.resolve.caseTypes=["crmApi","customFieldIds",function(t,e){var o="custom_"+e["caseType.category"],s={options:{limit:0}};return s[o]="Workflow",t("CaseType","get",s)}],t}angular.module("crm-tasks-workflows.decorators").config(["$provide",function(t){t.decorator("$route",e)}]),e.$inject=["$delegate"]}(),function(t){"use strict";angular.module("crm-tasks-workflows",["crm-tasks-workflows.core","crm-tasks-workflows.constants","crm-tasks-workflows.controllers","crm-tasks-workflows.decorators"])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
