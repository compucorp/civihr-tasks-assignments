!function(t){"use strict";angular.module("crm-tasks-workflows.controllers",[])}(),function(t){"use strict";angular.module("crm-tasks-workflows.core",["crmCaseType"])}(),function(t){"use strict";angular.module("crm-tasks-workflows.decorators",[])}(),function(t){"use strict";function o(t,o,e,r,n,s,c){var a,i;o.debug("Controller: CaseTypeExtendedController"),n.actTypes={values:(a=s.values.map(function(t){return t.label=t.label+" (Task)",t}),i=c.values.map(function(t){return t.label=t.label+" (Document)",t}),a.concat(i))},t("CaseTypeCtrl",{$scope:e,crmApi:r,apiCalls:n});var l=e.addActivity;e.addActivity=function(t,o){l(t,o),t.activityTypes.forEach(function(t){t.name===o&&delete t.reference_activity})}}angular.module("crm-tasks-workflows.controllers").controller("CaseTypeExtendedController",o),o.$inject=["$controller","$log","$scope","crmApi","apiCalls","activityOptionsTask","activityOptionsDocument"]}(),function(t){"use strict";function e(t){var o;function e(o){function t(t){return t("OptionValue","get",{option_group_id:"activity_type",component_id:o,sequential:1,options:{sort:"name",limit:0}})}return t.$inject=["crmApi"],t}return(o=t.routes["/caseType/:id"]).controller="CaseTypeExtendedController",o.resolve.activityOptionsTask=e("CiviTask"),o.resolve.activityOptionsDocument=e("CiviDocument"),t}angular.module("crm-tasks-workflows.decorators").config(["$provide","$routeProvider",function(t,o){t.decorator("$route",e)}]),e.$inject=["$delegate"]}(),function(t){"use strict";angular.module("crm-tasks-workflows",["crm-tasks-workflows.core","crm-tasks-workflows.controllers","crm-tasks-workflows.decorators"])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
