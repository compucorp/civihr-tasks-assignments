!function(t){"use strict";angular.module("crm-tasks-workflows.controllers",[])}(),function(t){"use strict";angular.module("crm-tasks-workflows.core",["crmCaseType"])}(),function(t){"use strict";angular.module("crm-tasks-workflows.decorators",[])}(),function(t){"use strict";function e(t,e,o,r,n,c,s){e.debug("Controller: CaseTypeExtendedController");var i,a,l={};function u(t,e){l.addActivity(t,e),t.activityTypes.forEach(function(t){t.name===e&&delete t.reference_activity})}n.actTypes={values:(i=c.values.map(function(t){return t.label=t.label+" (Task)",t}),a=s.values.map(function(t){return t.label=t.label+" (Document)",t}),i.concat(a))},t("CaseTypeCtrl",{$scope:o,crmApi:r,apiCalls:n}),l.addActivity=o.addActivity,o.addActivity=u}angular.module("crm-tasks-workflows.controllers").controller("CaseTypeExtendedController",e),e.$inject=["$controller","$log","$scope","crmApi","apiCalls","activityOptionsTask","activityOptionsDocument"]}(),function(t){"use strict";function e(t){var e,o;function r(e){function t(t){return t("OptionValue","get",{option_group_id:"activity_type",component_id:e,sequential:1,options:{sort:"name",limit:0}})}return t.$inject=["crmApi"],t}return e=t.routes["/caseType/:id"],o=t.routes["/caseType"],e.controller="CaseTypeExtendedController",e.resolve.activityOptionsTask=r("CiviTask"),e.resolve.activityOptionsDocument=r("CiviDocument"),o.resolve.caseTypes=function(){function t(t){return t("CaseType","get",{category:"WORKFLOW",options:{limit:0}})}return t.$inject=["crmApi"],t}(),t}angular.module("crm-tasks-workflows.decorators").config(["$provide",function(t){t.decorator("$route",e)}]),e.$inject=["$delegate"]}(),function(t){"use strict";angular.module("crm-tasks-workflows",["crm-tasks-workflows.core","crm-tasks-workflows.controllers","crm-tasks-workflows.decorators"])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
