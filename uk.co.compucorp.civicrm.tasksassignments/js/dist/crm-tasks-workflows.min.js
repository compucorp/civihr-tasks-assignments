!function(e){"use strict";angular.module("crm-tasks-workflows.controllers",[])}(),function(e){"use strict";angular.module("crm-tasks-workflows.core",["crmCaseType"])}(),function(e){"use strict";angular.module("crm-tasks-workflows.decorators",[])}(),function(e){"use strict";function t(e,t,o){e.debug("Controller: CaseTypeExtendedController"),t.activityTypeOptions=[],o("OptionValue","get",{option_group_id:"activity_type",component_id:{IN:["CiviTask","CiviDocument"]},sequential:1,options:{sort:"name",limit:0}}).then(function(e){t.activityTypeOptions=e.values.map(function(e){return{id:e.name,text:e.label,icon:e.icon}})})}angular.module("crm-tasks-workflows.controllers").controller("CaseTypeExtendedController",t),t.$inject=["$log","$scope","crmApi"]}(),function(e){"use strict";function t(e){return e[0].compile=function(){return function(t,e,o){var r=CRM.$("input",e);function c(){CRM.$(r).crmSelect2({data:t[o.crmOptions],createSearchChoice:function(e){return{id:e,text:e+" ("+ts("new")+")"}},createSearchChoicePosition:"bottom",placeholder:o.placeholder})}c(),t.$watch(o.crmOptions,c),CRM.$(r).on("select2-selecting",function(e){t[o.crmVar]=e.val,t.$evalAsync(o.crmOnAdd),t.$evalAsync("_resetSelection()"),e.preventDefault()}),t._resetSelection=function(){CRM.$(r).select2("close"),CRM.$(r).select2("val",""),t[o.crmVar]=""}}},e}angular.module("crm-tasks-workflows.decorators").config(["$provide",function(e){e.decorator("crmAddNameDirective",t)}]),t.$inject=["$delegate"]}(),function(e){"use strict";angular.module("crm-tasks-workflows",["crm-tasks-workflows.core","crm-tasks-workflows.controllers","crm-tasks-workflows.decorators"])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNybS10YXNrcy13b3JrZmxvd3MuY29udHJvbGxlcnMuanMiLCJjcm0tdGFza3Mtd29ya2Zsb3dzLmNvcmUuanMiLCJjcm0tdGFza3Mtd29ya2Zsb3dzLmRlY29yYXRvcnMuanMiLCJjYXNldHlwZS5leHRlbmRlZC5jb250cm9sbGVyLmpzIiwiY3JtLWFkZC1uYW1lLmRlY29yYXRvci5qcyIsImNybS10YXNrcy13b3JrZmxvd3MuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsIkNhc2VUeXBlRXh0ZW5kZWRDb250cm9sbGVyIiwiJGxvZyIsIiRzY29wZSIsImNybUFwaSIsImRlYnVnIiwiYWN0aXZpdHlUeXBlT3B0aW9ucyIsIm9wdGlvbl9ncm91cF9pZCIsImNvbXBvbmVudF9pZCIsIklOIiwic2VxdWVudGlhbCIsIm9wdGlvbnMiLCJzb3J0IiwibGltaXQiLCJ0aGVuIiwiZGF0YSIsInZhbHVlcyIsIm1hcCIsInR5cGUiLCJpZCIsIm5hbWUiLCJ0ZXh0IiwibGFiZWwiLCJpY29uIiwiY29udHJvbGxlciIsIiRpbmplY3QiLCJDcm1BZGROYW1lRGVjb3JhdG9yIiwiJGRlbGVnYXRlIiwiY29tcGlsZSIsInNjb3BlIiwiZWxlbWVudCIsImF0dHJzIiwiaW5wdXQiLCJDUk0iLCIkIiwiaW5pdFNlbGVjdDIiLCJjcm1TZWxlY3QyIiwiY3JtT3B0aW9ucyIsImNyZWF0ZVNlYXJjaENob2ljZSIsInRlcm0iLCJ0cyIsImNyZWF0ZVNlYXJjaENob2ljZVBvc2l0aW9uIiwicGxhY2Vob2xkZXIiLCIkd2F0Y2giLCJvbiIsImUiLCJjcm1WYXIiLCJ2YWwiLCIkZXZhbEFzeW5jIiwiY3JtT25BZGQiLCJwcmV2ZW50RGVmYXVsdCIsIl9yZXNldFNlbGVjdGlvbiIsInNlbGVjdDIiLCJjb25maWciLCIkcHJvdmlkZSIsImRlY29yYXRvciJdLCJtYXBwaW5ncyI6IkNBRUEsU0FBQUEsR0FDQSxhQUdBQSxRQURBQyxPQUFBLGtDQUFBLElBSEEsR0NBQSxTQUFBRCxHQUNBLGFBS0FBLFFBSEFDLE9BQUEsMkJBQUEsQ0FDQSxnQkFKQSxHQ0FBLFNBQUFELEdBQ0EsYUFHQUEsUUFEQUMsT0FBQSxpQ0FBQSxJQUhBLEdDQUEsU0FBQUQsR0FDQSxhQVNBLFNBQUFFLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0FGLEVBQUFHLE1BQUEsMENBRUFGLEVBQUFHLG9CQUFBLEdBWUFGLEVBQUEsY0FBQSxNQUFBLENBQ0FHLGdCQUFBLGdCQUNBQyxhQUFBLENBQUFDLEdBQUEsQ0FBQSxXQUFBLGlCQUNBQyxXQUFBLEVBQ0FDLFFBQUEsQ0FDQUMsS0FBQSxPQUNBQyxNQUFBLEtBRUFDLEtBQUEsU0FBQUMsR0FDQVosRUFBQUcsb0JBQUFTLEVBQUFDLE9BQUFDLElBQUEsU0FBQUMsR0FDQSxNQUFBLENBQUFDLEdBQUFELEVBQUFFLEtBQUFDLEtBQUFILEVBQUFJLE1BQUFDLEtBQUFMLEVBQUFLLFVBT0F4QixRQXZDQUMsT0FBQSxtQ0FDQXdCLFdBQUEsNkJBQUF2QixHQUVBQSxFQUFBd0IsUUFBQSxDQUNBLE9BQUEsU0FBQSxVQVBBLEdDQUEsU0FBQTFCLEdBQ0EsYUFXQSxTQUFBMkIsRUFBQUMsR0E2Q0EsT0E1Q0FBLEVBQUEsR0FFQUMsUUFBQSxXQUNBLE9BQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FDQSxJQUFBQyxFQUFBQyxJQUFBQyxFQUFBLFFBQUFKLEdBdUJBLFNBQUFLLElBQ0FGLElBQUFDLEVBQUFGLEdBQUFJLFdBQUEsQ0FDQXJCLEtBQUFjLEVBQUFFLEVBQUFNLFlBQ0FDLG1CQUFBLFNBQUFDLEdBQ0EsTUFBQSxDQUFBcEIsR0FBQW9CLEVBQUFsQixLQUFBa0IsRUFBQSxLQUFBQyxHQUFBLE9BQUEsTUFFQUMsMkJBQUEsU0FDQUMsWUFBQVgsRUFBQVcsY0EzQkFQLElBZ0NBTixFQUFBYyxPQUFBWixFQUFBTSxXQUFBRixHQXBCQUYsSUFBQUMsRUFBQUYsR0FBQVksR0FBQSxvQkFBQSxTQUFBQyxHQUNBaEIsRUFBQUUsRUFBQWUsUUFBQUQsRUFBQUUsSUFDQWxCLEVBQUFtQixXQUFBakIsRUFBQWtCLFVBQ0FwQixFQUFBbUIsV0FBQSxxQkFDQUgsRUFBQUssbUJBWEFyQixFQUFBc0IsZ0JBQUEsV0FDQWxCLElBQUFDLEVBQUFGLEdBQUFvQixRQUFBLFNBQ0FuQixJQUFBQyxFQUFBRixHQUFBb0IsUUFBQSxNQUFBLElBQ0F2QixFQUFBRSxFQUFBZSxRQUFBLE1BNkJBbkIsRUFJQTVCLFFBMURBQyxPQUFBLGtDQUNBcUQsT0FBQSxDQUFBLFdBQUEsU0FBQUMsR0FDQUEsRUFBQUMsVUFBQSxzQkFBQTdCLE1BR0FBLEVBQUFELFFBQUEsQ0FDQSxhQVRBLEdDQUEsU0FBQTFCLEdBQ0EsYUFPQUEsUUFMQUMsT0FBQSxzQkFBQSxDQUNBLDJCQUNBLGtDQUNBLG1DQU5BIiwiZmlsZSI6ImNybS10YXNrcy13b3JrZmxvd3MubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIGFuZ3VsYXIgKi9cblxuKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyLm1vZHVsZSgnY3JtLXRhc2tzLXdvcmtmbG93cy5jb250cm9sbGVycycsIFtdKTtcbn0pKGFuZ3VsYXIpO1xuIiwiLyogZ2xvYmFsIGFuZ3VsYXIgKi9cblxuKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyLm1vZHVsZSgnY3JtLXRhc2tzLXdvcmtmbG93cy5jb3JlJywgW1xuICAgICdjcm1DYXNlVHlwZSdcbiAgXSk7XG59KShhbmd1bGFyKTtcbiIsIi8qIGdsb2JhbCBhbmd1bGFyICovXG5cbihmdW5jdGlvbiAoYW5ndWxhcikge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhci5tb2R1bGUoJ2NybS10YXNrcy13b3JrZmxvd3MuZGVjb3JhdG9ycycsIFtdKTtcbn0pKGFuZ3VsYXIpO1xuIiwiLyogZ2xvYmFsIGFuZ3VsYXIgKi9cblxuKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBhbmd1bGFyLm1vZHVsZSgnY3JtLXRhc2tzLXdvcmtmbG93cy5jb250cm9sbGVycycpXG4gICAgLmNvbnRyb2xsZXIoJ0Nhc2VUeXBlRXh0ZW5kZWRDb250cm9sbGVyJywgQ2FzZVR5cGVFeHRlbmRlZENvbnRyb2xsZXIpO1xuXG4gIENhc2VUeXBlRXh0ZW5kZWRDb250cm9sbGVyLiRpbmplY3QgPSBbXG4gICAgJyRsb2cnLCAnJHNjb3BlJywgJ2NybUFwaSdcbiAgXTtcblxuICBmdW5jdGlvbiBDYXNlVHlwZUV4dGVuZGVkQ29udHJvbGxlciAoJGxvZywgJHNjb3BlLCBjcm1BcGkpIHtcbiAgICAkbG9nLmRlYnVnKCdDb250cm9sbGVyOiBDYXNlVHlwZUV4dGVuZGVkQ29udHJvbGxlcicpO1xuXG4gICAgJHNjb3BlLmFjdGl2aXR5VHlwZU9wdGlvbnMgPSBbXTtcblxuICAgIChmdW5jdGlvbiBpbml0ICgpIHtcbiAgICAgIGZldGNoQWN0aXZpdHlUeXBlcygpO1xuICAgIH0pKCk7XG5cbiAgICAvKipcbiAgICAgKiBGZXRjaCBhY3Rpdml0eSB0eXBlcyB3aGljaCBhcmUgY29tcG9uZW50cyBvZiBDaXZpVGFzayBvciBDaXZpRG9jdW1lbnRcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZmV0Y2hBY3Rpdml0eVR5cGVzICgpIHtcbiAgICAgIHJldHVybiBjcm1BcGkoJ09wdGlvblZhbHVlJywgJ2dldCcsIHtcbiAgICAgICAgb3B0aW9uX2dyb3VwX2lkOiAnYWN0aXZpdHlfdHlwZScsXG4gICAgICAgIGNvbXBvbmVudF9pZDogeydJTic6IFsnQ2l2aVRhc2snLCAnQ2l2aURvY3VtZW50J119LFxuICAgICAgICBzZXF1ZW50aWFsOiAxLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgc29ydDogJ25hbWUnLFxuICAgICAgICAgIGxpbWl0OiAwXG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgJHNjb3BlLmFjdGl2aXR5VHlwZU9wdGlvbnMgPSBkYXRhLnZhbHVlcy5tYXAoZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgICByZXR1cm4geyBpZDogdHlwZS5uYW1lLCB0ZXh0OiB0eXBlLmxhYmVsLCBpY29uOiB0eXBlLmljb24gfTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gQ2FzZVR5cGVFeHRlbmRlZENvbnRyb2xsZXI7XG59KShhbmd1bGFyKTtcbiIsIi8qIGdsb2JhbCBhbmd1bGFyLCB0cyAqL1xuXG4oZnVuY3Rpb24gKGFuZ3VsYXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXIubW9kdWxlKCdjcm0tdGFza3Mtd29ya2Zsb3dzLmRlY29yYXRvcnMnKVxuICAgIC5jb25maWcoWyckcHJvdmlkZScsIGZ1bmN0aW9uICgkcHJvdmlkZSkge1xuICAgICAgJHByb3ZpZGUuZGVjb3JhdG9yKCdjcm1BZGROYW1lRGlyZWN0aXZlJywgQ3JtQWRkTmFtZURlY29yYXRvcik7XG4gICAgfV0pO1xuXG4gIENybUFkZE5hbWVEZWNvcmF0b3IuJGluamVjdCA9IFtcbiAgICAnJGRlbGVnYXRlJ1xuICBdO1xuXG4gIGZ1bmN0aW9uIENybUFkZE5hbWVEZWNvcmF0b3IgKCRkZWxlZ2F0ZSkge1xuICAgIHZhciBkaXJlY3RpdmUgPSAkZGVsZWdhdGVbMF07XG5cbiAgICBkaXJlY3RpdmUuY29tcGlsZSA9IGZ1bmN0aW9uIGNvbXBpbGUgKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gQ1JNLiQoJ2lucHV0JywgZWxlbWVudCk7XG5cbiAgICAgICAgKGZ1bmN0aW9uIGluaXQgKCkge1xuICAgICAgICAgIGluaXRTZWxlY3QyKCk7XG4gICAgICAgICAgaW5pdFdhdGNoZXJzKCk7XG4gICAgICAgICAgaW5pdEV2ZW50cygpO1xuICAgICAgICB9KSgpO1xuXG4gICAgICAgIHNjb3BlLl9yZXNldFNlbGVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBDUk0uJChpbnB1dCkuc2VsZWN0MignY2xvc2UnKTtcbiAgICAgICAgICBDUk0uJChpbnB1dCkuc2VsZWN0MigndmFsJywgJycpO1xuICAgICAgICAgIHNjb3BlW2F0dHJzLmNybVZhcl0gPSAnJztcbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBpbml0RXZlbnRzICgpIHtcbiAgICAgICAgICBDUk0uJChpbnB1dCkub24oJ3NlbGVjdDItc2VsZWN0aW5nJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHNjb3BlW2F0dHJzLmNybVZhcl0gPSBlLnZhbDtcbiAgICAgICAgICAgIHNjb3BlLiRldmFsQXN5bmMoYXR0cnMuY3JtT25BZGQpO1xuICAgICAgICAgICAgc2NvcGUuJGV2YWxBc3luYygnX3Jlc2V0U2VsZWN0aW9uKCknKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGluaXRTZWxlY3QyICgpIHtcbiAgICAgICAgICBDUk0uJChpbnB1dCkuY3JtU2VsZWN0Mih7XG4gICAgICAgICAgICBkYXRhOiBzY29wZVthdHRycy5jcm1PcHRpb25zXSxcbiAgICAgICAgICAgIGNyZWF0ZVNlYXJjaENob2ljZTogZnVuY3Rpb24gKHRlcm0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHtpZDogdGVybSwgdGV4dDogdGVybSArICcgKCcgKyB0cygnbmV3JykgKyAnKSd9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNyZWF0ZVNlYXJjaENob2ljZVBvc2l0aW9uOiAnYm90dG9tJyxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBhdHRycy5wbGFjZWhvbGRlclxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5pdFdhdGNoZXJzICgpIHtcbiAgICAgICAgICBzY29wZS4kd2F0Y2goYXR0cnMuY3JtT3B0aW9ucywgaW5pdFNlbGVjdDIpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG5cbiAgICByZXR1cm4gJGRlbGVnYXRlO1xuICB9XG5cbiAgcmV0dXJuIENybUFkZE5hbWVEZWNvcmF0b3I7XG59KShhbmd1bGFyKTtcbiIsIi8qIGdsb2JhbCBhbmd1bGFyICovXG5cbihmdW5jdGlvbiAoYW5ndWxhcikge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhci5tb2R1bGUoJ2NybS10YXNrcy13b3JrZmxvd3MnLCBbXG4gICAgJ2NybS10YXNrcy13b3JrZmxvd3MuY29yZScsXG4gICAgJ2NybS10YXNrcy13b3JrZmxvd3MuY29udHJvbGxlcnMnLFxuICAgICdjcm0tdGFza3Mtd29ya2Zsb3dzLmRlY29yYXRvcnMnXG4gIF0pO1xufSkoYW5ndWxhcik7XG4iXX0=
